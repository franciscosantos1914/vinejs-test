import type { FieldContext, Validation } from '../src/types.js';
import { SimpleErrorReporter } from '../src/reporters/simple_error_reporter.js';
declare class ValidationResult {
    #private;
    constructor(outputValue: any, reporter: SimpleErrorReporter);
    getOutput(): any;
    getErrors(): {
        message: string;
        field: string;
        rule: string;
        index?: number | undefined;
        meta?: Record<string, any> | undefined;
    }[];
    assertSucceeded(): void;
    assertOutput(expectedOutput: any): void;
    assertFailed(): void;
    assertErrorsCount(count: number): void;
    assertError(message: string): void;
}
export declare class ValidatorFactory {
    #private;
    constructor(field?: Partial<FieldContext>, bail?: boolean);
    withContext(field: Partial<FieldContext>): ValidatorFactory;
    bail(state: boolean): ValidatorFactory;
    execute(validation: Validation<any> | Validation<any>[], value: any): ValidationResult;
    executeAsync(validation: Validation<any> | Validation<any>[], value: any): Promise<ValidationResult>;
}
export {};
