import type { ParseFn, RefsStore, TransformFn, FieldContext, CompilerNodes, MessagesProviderContact, ErrorReporterContract as BaseReporter } from '@vinejs/compiler/types';
import type { Options as UrlOptions } from 'normalize-url';
import type { IsURLOptions } from 'validator/lib/isURL.js';
import type { IsEmailOptions } from 'validator/lib/isEmail.js';
import type { NormalizeEmailOptions } from 'validator/lib/normalizeEmail.js';
import type { IsMobilePhoneOptions, MobilePhoneLocale } from 'validator/lib/isMobilePhone.js';
import type { helpers } from './vine/helpers.js';
import type { ValidationError } from './errors/validation_error.js';
import type { OTYPE, COTYPE, PARSE, VALIDATION, UNIQUE_NAME, IS_OF_TYPE } from './symbols.js';
export type MobileOptions = {
    locale?: MobilePhoneLocale[];
} & IsMobilePhoneOptions;
export type EmailOptions = IsEmailOptions;
export { NormalizeEmailOptions };
export type URLOptions = IsURLOptions;
export type CreditCardOptions = {
    provider: ('amex' | 'dinersclub' | 'discover' | 'jcb' | 'mastercard' | 'unionpay' | 'visa')[];
};
export type PassportOptions = {
    countryCode: (typeof helpers)['passportCountryCodes'][number][];
};
export type PostalCodeOptions = {
    countryCode: (typeof helpers)['postalCountryCodes'][number][];
};
export type AlphaOptions = {
    allowSpaces?: boolean;
    allowUnderscores?: boolean;
    allowDashes?: boolean;
};
export type NormalizeUrlOptions = UrlOptions;
export type AlphaNumericOptions = AlphaOptions;
export type { Refs, FieldContext, RefIdentifier, ConditionalFn, MessagesProviderContact, } from '@vinejs/compiler/types';
export type EnumLike = {
    [K: string]: string | number;
    [number: number]: string;
};
export type ValidationMessages = Record<string, string>;
export type ValidationFields = Record<string, string>;
export interface ConstructableSchema<Output, CamelCaseOutput> {
    [OTYPE]: Output;
    [COTYPE]: CamelCaseOutput;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): CompilerNodes;
    clone(): this;
    [UNIQUE_NAME]?: string;
    [IS_OF_TYPE]?: (value: unknown, field: FieldContext) => boolean;
}
export type SchemaTypes = ConstructableSchema<any, any>;
export type Validator<Options extends any> = (value: unknown, options: Options, field: FieldContext) => any | Promise<any>;
export type ValidationRule<Options extends any> = {
    validator: Validator<Options>;
    isAsync: boolean;
    implicit: boolean;
};
export type Validation<Options extends any> = {
    options?: Options;
    rule: ValidationRule<Options>;
};
export interface RuleBuilder {
    [VALIDATION](): Validation<any>;
}
export type Transformer<Schema extends SchemaTypes, Output> = TransformFn<Exclude<Schema[typeof OTYPE], undefined>, Output>;
export type Parser = ParseFn;
export type FieldOptions = {
    allowNull: boolean;
    bail: boolean;
    isOptional: boolean;
    parse?: Parser;
};
export type ParserOptions = {
    toCamelCase: boolean;
};
export type UnionNoMatchCallback<Input> = (value: Input, field: FieldContext) => any;
export interface ErrorReporterContract extends BaseReporter {
    createError(): ValidationError;
}
export type ValidationOptions = {
    meta?: Record<string, any>;
    messagesProvider?: MessagesProviderContact;
    errorReporter?: () => ErrorReporterContract;
};
export type Infer<Schema extends {
    [OTYPE]: any;
}> = Schema[typeof OTYPE];
