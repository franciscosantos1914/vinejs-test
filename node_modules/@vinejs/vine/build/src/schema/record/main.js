import camelcase from 'camelcase';
import { BaseType } from '../base/main.js';
import { PARSE, UNIQUE_NAME, IS_OF_TYPE } from '../../symbols.js';
import { fixedLengthRule, maxLengthRule, minLengthRule, validateKeysRule } from './rules.js';
export class VineRecord extends BaseType {
    static rules = {
        maxLength: maxLengthRule,
        minLength: minLengthRule,
        fixedLength: fixedLengthRule,
        validateKeys: validateKeysRule,
    };
    #schema;
    [UNIQUE_NAME] = 'vine.object';
    [IS_OF_TYPE] = (value) => {
        return value !== null && typeof value === 'object' && !Array.isArray(value);
    };
    constructor(schema, options, validations) {
        super(options, validations);
        this.#schema = schema;
    }
    minLength(expectedLength) {
        return this.use(minLengthRule({ min: expectedLength }));
    }
    maxLength(expectedLength) {
        return this.use(maxLengthRule({ max: expectedLength }));
    }
    fixedLength(expectedLength) {
        return this.use(fixedLengthRule({ size: expectedLength }));
    }
    validateKeys(...args) {
        return this.use(validateKeysRule(...args));
    }
    clone() {
        return new VineRecord(this.#schema.clone(), this.cloneOptions(), this.cloneValidations());
    }
    [PARSE](propertyName, refs, options) {
        return {
            type: 'record',
            fieldName: propertyName,
            propertyName: options.toCamelCase ? camelcase(propertyName) : propertyName,
            bail: this.options.bail,
            allowNull: this.options.allowNull,
            isOptional: this.options.isOptional,
            each: this.#schema[PARSE]('*', refs, options),
            parseFnId: this.options.parse ? refs.trackParser(this.options.parse) : undefined,
            validations: this.compileValidations(refs),
        };
    }
}
