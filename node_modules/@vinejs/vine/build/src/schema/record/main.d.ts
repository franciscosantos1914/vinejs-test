import { RefsStore, RecordNode } from '@vinejs/compiler/types';
import { BaseType } from '../base/main.js';
import { OTYPE, COTYPE, PARSE, UNIQUE_NAME, IS_OF_TYPE } from '../../symbols.js';
import type { FieldOptions, ParserOptions, SchemaTypes, Validation } from '../../types.js';
import { validateKeysRule } from './rules.js';
export declare class VineRecord<Schema extends SchemaTypes> extends BaseType<{
    [K: string]: Schema[typeof OTYPE];
}, {
    [K: string]: Schema[typeof COTYPE];
}> {
    #private;
    static rules: {
        maxLength: (options: {
            max: number;
        }) => Validation<{
            max: number;
        }>;
        minLength: (options: {
            min: number;
        }) => Validation<{
            min: number;
        }>;
        fixedLength: (options: {
            size: number;
        }) => Validation<{
            size: number;
        }>;
        validateKeys: (options: (keys: string[], field: import("@vinejs/compiler/types").FieldContext) => void) => Validation<(keys: string[], field: import("@vinejs/compiler/types").FieldContext) => void>;
    };
    [UNIQUE_NAME]: string;
    [IS_OF_TYPE]: (value: unknown) => boolean;
    constructor(schema: Schema, options?: FieldOptions, validations?: Validation<any>[]);
    minLength(expectedLength: number): this;
    maxLength(expectedLength: number): this;
    fixedLength(expectedLength: number): this;
    validateKeys(...args: Parameters<typeof validateKeysRule>): this;
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): RecordNode;
}
