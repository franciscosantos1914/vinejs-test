import type { LiteralNode, RefsStore } from '@vinejs/compiler/types';
import { OTYPE, COTYPE, PARSE } from '../../symbols.js';
import type { Parser, Validation, RuleBuilder, Transformer, FieldOptions, ParserOptions, ConstructableSchema } from '../../types.js';
declare abstract class BaseModifiersType<Output, CamelCaseOutput> implements ConstructableSchema<Output, CamelCaseOutput> {
    abstract [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): LiteralNode;
    abstract clone(): this;
    [OTYPE]: Output;
    [COTYPE]: CamelCaseOutput;
    optional(): OptionalModifier<this>;
    nullable(): NullableModifier<this>;
    transform<TransformedOutput>(transformer: Transformer<this, TransformedOutput>): TransformModifier<this, TransformedOutput>;
}
declare class NullableModifier<Schema extends BaseModifiersType<any, any>> extends BaseModifiersType<Schema[typeof OTYPE] | null, Schema[typeof COTYPE] | null> {
    #private;
    constructor(parent: Schema);
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): LiteralNode;
}
declare class OptionalModifier<Schema extends BaseModifiersType<any, any>> extends BaseModifiersType<Schema[typeof OTYPE] | undefined, Schema[typeof COTYPE] | undefined> {
    #private;
    constructor(parent: Schema);
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): LiteralNode;
}
declare class TransformModifier<Schema extends BaseModifiersType<any, any>, Output> extends BaseModifiersType<Output, Output> {
    #private;
    [OTYPE]: Output;
    [COTYPE]: Output;
    constructor(transform: Transformer<Schema, Output>, parent: Schema);
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): LiteralNode;
}
export declare abstract class BaseLiteralType<Output, CamelCaseOutput> extends BaseModifiersType<Output, CamelCaseOutput> {
    abstract clone(): this;
    protected options: FieldOptions;
    protected validations: Validation<any>[];
    constructor(options?: Partial<FieldOptions>, validations?: Validation<any>[]);
    protected cloneValidations(): Validation<any>[];
    protected cloneOptions(): FieldOptions;
    protected compileValidations(refs: RefsStore): {
        ruleFnId: `ref://${number}`;
        implicit: boolean;
        isAsync: boolean;
    }[];
    parse(callback: Parser): this;
    use(validation: Validation<any> | RuleBuilder): this;
    bail(state: boolean): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): LiteralNode;
}
export {};
