import type { CompilerNodes, RefsStore } from '@vinejs/compiler/types';
import { OTYPE, COTYPE, PARSE } from '../../symbols.js';
import type { Parser, Validation, RuleBuilder, FieldOptions, ParserOptions, ConstructableSchema } from '../../types.js';
export declare abstract class BaseModifiersType<Output, CamelCaseOutput> implements ConstructableSchema<Output, CamelCaseOutput> {
    abstract [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): CompilerNodes;
    abstract clone(): this;
    [OTYPE]: Output;
    [COTYPE]: CamelCaseOutput;
    optional(): OptionalModifier<this>;
    nullable(): NullableModifier<this>;
}
declare class NullableModifier<Schema extends BaseModifiersType<any, any>> extends BaseModifiersType<Schema[typeof OTYPE] | null, Schema[typeof COTYPE] | null> {
    #private;
    constructor(parent: Schema);
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): CompilerNodes;
}
declare class OptionalModifier<Schema extends BaseModifiersType<any, any>> extends BaseModifiersType<Schema[typeof OTYPE] | undefined, Schema[typeof COTYPE] | undefined> {
    #private;
    constructor(parent: Schema);
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): CompilerNodes;
}
export declare abstract class BaseType<Output, CamelCaseOutput> extends BaseModifiersType<Output, CamelCaseOutput> {
    protected options: FieldOptions;
    protected validations: Validation<any>[];
    constructor(options?: FieldOptions, validations?: Validation<any>[]);
    protected cloneValidations(): Validation<any>[];
    protected cloneOptions(): FieldOptions;
    protected compileValidations(refs: RefsStore): {
        ruleFnId: `ref://${number}`;
        implicit: boolean;
        isAsync: boolean;
    }[];
    parse(callback: Parser): this;
    use(validation: Validation<any> | RuleBuilder): this;
    bail(state: boolean): this;
}
export {};
