import camelcase from 'camelcase';
import { BaseType } from '../base/main.js';
import { IS_OF_TYPE, PARSE, UNIQUE_NAME } from '../../symbols.js';
export class VineTuple extends BaseType {
    #schemas;
    #allowUnknownProperties = false;
    [UNIQUE_NAME] = 'vine.array';
    [IS_OF_TYPE] = (value) => {
        return Array.isArray(value);
    };
    constructor(schemas, options, validations) {
        super(options, validations);
        this.#schemas = schemas;
    }
    allowUnknownProperties() {
        this.#allowUnknownProperties = true;
        return this;
    }
    clone() {
        const cloned = new VineTuple(this.#schemas.map((schema) => schema.clone()), this.cloneOptions(), this.cloneValidations());
        if (this.#allowUnknownProperties) {
            cloned.allowUnknownProperties();
        }
        return cloned;
    }
    [PARSE](propertyName, refs, options) {
        return {
            type: 'tuple',
            fieldName: propertyName,
            propertyName: options.toCamelCase ? camelcase(propertyName) : propertyName,
            bail: this.options.bail,
            allowNull: this.options.allowNull,
            isOptional: this.options.isOptional,
            allowUnknownProperties: this.#allowUnknownProperties,
            parseFnId: this.options.parse ? refs.trackParser(this.options.parse) : undefined,
            validations: this.compileValidations(refs),
            properties: this.#schemas.map((schema, index) => schema[PARSE](String(index), refs, options)),
        };
    }
}
