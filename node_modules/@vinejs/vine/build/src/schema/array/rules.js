import { helpers } from '../../vine/helpers.js';
import { messages } from '../../defaults.js';
import { createRule } from '../../vine/create_rule.js';
export const minLengthRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (value.length < options.min) {
        field.report(messages['array.minLength'], 'array.minLength', field, options);
    }
});
export const maxLengthRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (value.length > options.max) {
        field.report(messages['array.maxLength'], 'array.maxLength', field, options);
    }
});
export const fixedLengthRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (value.length !== options.size) {
        field.report(messages['array.fixedLength'], 'array.fixedLength', field, options);
    }
});
export const notEmptyRule = createRule((value, _, field) => {
    if (!field.isValid) {
        return;
    }
    if (value.length <= 0) {
        field.report(messages.notEmpty, 'notEmpty', field);
    }
});
export const distinctRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (!helpers.isDistinct(value, options.fields)) {
        field.report(messages.distinct, 'distinct', field, options);
    }
});
export const compactRule = createRule((value, _, field) => {
    if (!field.isValid) {
        return;
    }
    field.mutate(value.filter((item) => helpers.exists(item) && item !== ''), field);
});
