import camelcase from 'camelcase';
import { messages } from '../../defaults.js';
import { OTYPE, COTYPE, PARSE, IS_OF_TYPE } from '../../symbols.js';
export class VineUnionOfTypes {
    #schemas;
    #otherwiseCallback = (_, field) => {
        field.report(messages.unionOfTypes, 'unionOfTypes', field);
    };
    constructor(schemas) {
        this.#schemas = schemas;
    }
    otherwise(callback) {
        this.#otherwiseCallback = callback;
        return this;
    }
    clone() {
        const cloned = new VineUnionOfTypes(this.#schemas);
        cloned.otherwise(this.#otherwiseCallback);
        return cloned;
    }
    [PARSE](propertyName, refs, options) {
        return {
            type: 'union',
            fieldName: propertyName,
            propertyName: options.toCamelCase ? camelcase(propertyName) : propertyName,
            elseConditionalFnRefId: refs.trackConditional(this.#otherwiseCallback),
            conditions: this.#schemas.map((schema) => {
                return {
                    conditionalFnRefId: refs.trackConditional((value, field) => {
                        return schema[IS_OF_TYPE](value, field);
                    }),
                    schema: schema[PARSE](propertyName, refs, options),
                };
            }),
        };
    }
}
