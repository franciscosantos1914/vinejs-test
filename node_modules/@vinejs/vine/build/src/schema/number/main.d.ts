import { BaseLiteralType } from '../base/literal.js';
import { FieldOptions, Validation } from '../../types.js';
import { IS_OF_TYPE, UNIQUE_NAME } from '../../symbols.js';
export declare class VineNumber extends BaseLiteralType<number, number> {
    protected options: FieldOptions & {
        strict?: boolean;
    };
    static rules: {
        max: (options: {
            max: number;
        }) => Validation<{
            max: number;
        }>;
        min: (options: {
            min: number;
        }) => Validation<{
            min: number;
        }>;
        range: (options: {
            min: number;
            max: number;
        }) => Validation<{
            min: number;
            max: number;
        }>;
        number: (options: {
            strict?: boolean | undefined;
        }) => Validation<{
            strict?: boolean | undefined;
        }>;
        decimal: (options: {
            range: [number, (number | undefined)?];
        }) => Validation<{
            range: [number, (number | undefined)?];
        }>;
        negative: (options?: undefined) => Validation<undefined>;
        positive: (options?: undefined) => Validation<undefined>;
        withoutDecimals: (options?: undefined) => Validation<undefined>;
    };
    [UNIQUE_NAME]: string;
    [IS_OF_TYPE]: (value: unknown) => boolean;
    constructor(options?: Partial<FieldOptions> & {
        strict?: boolean;
    }, validations?: Validation<any>[]);
    min(value: number): this;
    max(value: number): this;
    range(value: [min: number, max: number]): this;
    positive(): this;
    negative(): this;
    decimal(range: number | [number, number]): this;
    withoutDecimals(): this;
    clone(): this;
}
