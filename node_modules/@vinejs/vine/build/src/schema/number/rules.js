import { helpers } from '../../vine/helpers.js';
import { createRule } from '../../vine/create_rule.js';
import { messages } from '../../defaults.js';
export const numberRule = createRule((value, options, field) => {
    const valueAsNumber = options.strict ? value : helpers.asNumber(value);
    if (typeof valueAsNumber !== 'number' ||
        Number.isNaN(valueAsNumber) ||
        valueAsNumber === Number.POSITIVE_INFINITY ||
        valueAsNumber === Number.NEGATIVE_INFINITY) {
        field.report(messages.number, 'number', field);
        return;
    }
    field.mutate(valueAsNumber, field);
});
export const minRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (value < options.min) {
        field.report(messages.min, 'min', field, options);
    }
});
export const maxRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (value > options.max) {
        field.report(messages.max, 'max', field, options);
    }
});
export const rangeRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (value < options.min || value > options.max) {
        field.report(messages.range, 'range', field, options);
    }
});
export const positiveRule = createRule((value, _, field) => {
    if (!field.isValid) {
        return;
    }
    if (value < 0) {
        field.report(messages.positive, 'positive', field);
    }
});
export const negativeRule = createRule((value, _, field) => {
    if (!field.isValid) {
        return;
    }
    if (value >= 0) {
        field.report(messages.negative, 'negative', field);
    }
});
export const decimalRule = createRule((value, options, field) => {
    if (!field.isValid) {
        return;
    }
    if (!helpers.isDecimal(String(value), {
        force_decimal: options.range[0] !== 0,
        decimal_digits: options.range.join(','),
    })) {
        field.report(messages.decimal, 'decimal', field, { digits: options.range.join('-') });
    }
});
export const withoutDecimalsRule = createRule((value, _, field) => {
    if (!field.isValid) {
        return;
    }
    if (!Number.isInteger(value)) {
        field.report(messages.withoutDecimals, 'withoutDecimals', field);
    }
});
