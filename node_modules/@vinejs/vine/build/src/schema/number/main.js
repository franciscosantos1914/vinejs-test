import { helpers } from '../../vine/helpers.js';
import { BaseLiteralType } from '../base/literal.js';
import { IS_OF_TYPE, UNIQUE_NAME } from '../../symbols.js';
import { maxRule, minRule, rangeRule, numberRule, decimalRule, negativeRule, positiveRule, withoutDecimalsRule, } from './rules.js';
export class VineNumber extends BaseLiteralType {
    static rules = {
        max: maxRule,
        min: minRule,
        range: rangeRule,
        number: numberRule,
        decimal: decimalRule,
        negative: negativeRule,
        positive: positiveRule,
        withoutDecimals: withoutDecimalsRule,
    };
    [UNIQUE_NAME] = 'vine.number';
    [IS_OF_TYPE] = (value) => {
        const valueAsNumber = helpers.asNumber(value);
        return !Number.isNaN(valueAsNumber);
    };
    constructor(options, validations) {
        super(options, validations || [numberRule(options || {})]);
    }
    min(value) {
        return this.use(minRule({ min: value }));
    }
    max(value) {
        return this.use(maxRule({ max: value }));
    }
    range(value) {
        return this.use(rangeRule({ min: value[0], max: value[1] }));
    }
    positive() {
        return this.use(positiveRule());
    }
    negative() {
        return this.use(negativeRule());
    }
    decimal(range) {
        return this.use(decimalRule({ range: Array.isArray(range) ? range : [range] }));
    }
    withoutDecimals() {
        return this.use(withoutDecimalsRule());
    }
    clone() {
        return new VineNumber(this.cloneOptions(), this.cloneValidations());
    }
}
