import camelcase from 'camelcase';
import { BaseModifiersType, BaseType } from '../base/main.js';
import { PARSE, UNIQUE_NAME, IS_OF_TYPE } from '../../symbols.js';
export class VineCamelCaseObject extends BaseModifiersType {
    #schema;
    [UNIQUE_NAME] = 'types.object';
    [IS_OF_TYPE] = (value) => {
        return value !== null && typeof value === 'object' && !Array.isArray(value);
    };
    constructor(schema) {
        super();
        this.#schema = schema;
    }
    clone() {
        return new VineCamelCaseObject(this.#schema.clone());
    }
    [PARSE](propertyName, refs, options) {
        options.toCamelCase = true;
        return this.#schema[PARSE](propertyName, refs, options);
    }
}
export class VineObject extends BaseType {
    #properties;
    #groups = [];
    #allowUnknownProperties = false;
    [UNIQUE_NAME] = 'vine.object';
    [IS_OF_TYPE] = (value) => {
        return value !== null && typeof value === 'object' && !Array.isArray(value);
    };
    constructor(properties, options, validations) {
        super(options, validations);
        this.#properties = properties;
    }
    getProperties() {
        return Object.keys(this.#properties).reduce((result, key) => {
            result[key] = this.#properties[key].clone();
            return result;
        }, {});
    }
    allowUnknownProperties() {
        this.#allowUnknownProperties = true;
        return this;
    }
    merge(group) {
        this.#groups.push(group);
        return this;
    }
    clone() {
        const cloned = new VineObject(this.getProperties(), this.cloneOptions(), this.cloneValidations());
        this.#groups.forEach((group) => cloned.merge(group));
        if (this.#allowUnknownProperties) {
            cloned.allowUnknownProperties();
        }
        return cloned;
    }
    toCamelCase() {
        return new VineCamelCaseObject(this);
    }
    [PARSE](propertyName, refs, options) {
        return {
            type: 'object',
            fieldName: propertyName,
            propertyName: options.toCamelCase ? camelcase(propertyName) : propertyName,
            bail: this.options.bail,
            allowNull: this.options.allowNull,
            isOptional: this.options.isOptional,
            parseFnId: this.options.parse ? refs.trackParser(this.options.parse) : undefined,
            allowUnknownProperties: this.#allowUnknownProperties,
            validations: this.compileValidations(refs),
            properties: Object.keys(this.#properties).map((property) => {
                return this.#properties[property][PARSE](property, refs, options);
            }),
            groups: this.#groups.map((group) => {
                return group[PARSE](refs, options);
            }),
        };
    }
}
