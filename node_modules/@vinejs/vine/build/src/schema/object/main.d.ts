import type { ObjectNode, RefsStore } from '@vinejs/compiler/types';
import { ObjectGroup } from './group.js';
import { GroupConditional } from './conditional.js';
import { BaseModifiersType, BaseType } from '../base/main.js';
import { OTYPE, COTYPE, PARSE, UNIQUE_NAME, IS_OF_TYPE } from '../../symbols.js';
import type { Validation, SchemaTypes, FieldOptions, ParserOptions } from '../../types.js';
export declare class VineCamelCaseObject<Schema extends VineObject<any, any, any>> extends BaseModifiersType<Schema[typeof COTYPE], Schema[typeof COTYPE]> {
    #private;
    [UNIQUE_NAME]: string;
    [IS_OF_TYPE]: (value: unknown) => boolean;
    constructor(schema: Schema);
    clone(): this;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): ObjectNode;
}
export declare class VineObject<Properties extends Record<string, SchemaTypes>, Output, CamelCaseOutput> extends BaseType<Output, CamelCaseOutput> {
    #private;
    [UNIQUE_NAME]: string;
    [IS_OF_TYPE]: (value: unknown) => boolean;
    constructor(properties: Properties, options?: FieldOptions, validations?: Validation<any>[]);
    getProperties(): Properties;
    allowUnknownProperties<Value>(): VineObject<Properties, Output & {
        [K: string]: Value;
    }, CamelCaseOutput & {
        [K: string]: Value;
    }>;
    merge<Group extends ObjectGroup<GroupConditional<any, any, any>>>(group: Group): VineObject<Properties, Output & Group[typeof OTYPE], CamelCaseOutput & Group[typeof COTYPE]>;
    clone(): this;
    toCamelCase(): VineCamelCaseObject<this>;
    [PARSE](propertyName: string, refs: RefsStore, options: ParserOptions): ObjectNode;
}
