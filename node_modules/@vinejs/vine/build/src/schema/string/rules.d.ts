import validator from 'validator';
import type { FieldContext } from '@vinejs/compiler/types';
import type { AlphaOptions, MobileOptions, PassportOptions, CreditCardOptions, PostalCodeOptions } from '../../types.js';
export declare const stringRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const emailRule: (options?: import("validator/lib/isEmail.js").IsEmailOptions | undefined) => import("../../types.js").Validation<import("validator/lib/isEmail.js").IsEmailOptions | undefined>;
export declare const mobileRule: (options?: MobileOptions | ((field: FieldContext) => MobileOptions | undefined) | undefined) => import("../../types.js").Validation<MobileOptions | ((field: FieldContext) => MobileOptions | undefined) | undefined>;
export declare const ipAddressRule: (options?: {
    version: 4 | 6;
} | undefined) => import("../../types.js").Validation<{
    version: 4 | 6;
} | undefined>;
export declare const regexRule: (options: RegExp) => import("../../types.js").Validation<RegExp>;
export declare const hexCodeRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const urlRule: (options?: import("validator/lib/isURL.js").IsURLOptions | undefined) => import("../../types.js").Validation<import("validator/lib/isURL.js").IsURLOptions | undefined>;
export declare const activeUrlRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const alphaRule: (options?: AlphaOptions | undefined) => import("../../types.js").Validation<AlphaOptions | undefined>;
export declare const alphaNumericRule: (options?: AlphaOptions | undefined) => import("../../types.js").Validation<AlphaOptions | undefined>;
export declare const minLengthRule: (options: {
    min: number;
}) => import("../../types.js").Validation<{
    min: number;
}>;
export declare const maxLengthRule: (options: {
    max: number;
}) => import("../../types.js").Validation<{
    max: number;
}>;
export declare const fixedLengthRule: (options: {
    size: number;
}) => import("../../types.js").Validation<{
    size: number;
}>;
export declare const endsWithRule: (options: {
    substring: string;
}) => import("../../types.js").Validation<{
    substring: string;
}>;
export declare const startsWithRule: (options: {
    substring: string;
}) => import("../../types.js").Validation<{
    substring: string;
}>;
export declare const sameAsRule: (options: {
    otherField: string;
}) => import("../../types.js").Validation<{
    otherField: string;
}>;
export declare const notSameAsRule: (options: {
    otherField: string;
}) => import("../../types.js").Validation<{
    otherField: string;
}>;
export declare const confirmedRule: (options?: {
    confirmationField: string;
} | undefined) => import("../../types.js").Validation<{
    confirmationField: string;
} | undefined>;
export declare const trimRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const normalizeEmailRule: (options?: validator.default.NormalizeEmailOptions | undefined) => import("../../types.js").Validation<validator.default.NormalizeEmailOptions | undefined>;
export declare const toUpperCaseRule: (options?: string | string[] | undefined) => import("../../types.js").Validation<string | string[] | undefined>;
export declare const toLowerCaseRule: (options?: string | string[] | undefined) => import("../../types.js").Validation<string | string[] | undefined>;
export declare const toCamelCaseRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const escapeRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const normalizeUrlRule: (options?: import("normalize-url").Options | undefined) => import("../../types.js").Validation<import("normalize-url").Options | undefined>;
export declare const inRule: (options: {
    choices: string[] | ((field: FieldContext) => string[]);
}) => import("../../types.js").Validation<{
    choices: string[] | ((field: FieldContext) => string[]);
}>;
export declare const notInRule: (options: {
    list: string[] | ((field: FieldContext) => string[]);
}) => import("../../types.js").Validation<{
    list: string[] | ((field: FieldContext) => string[]);
}>;
export declare const creditCardRule: (options?: CreditCardOptions | ((field: FieldContext) => CreditCardOptions | void | undefined) | undefined) => import("../../types.js").Validation<CreditCardOptions | ((field: FieldContext) => CreditCardOptions | void | undefined) | undefined>;
export declare const passportRule: (options: PassportOptions | ((field: FieldContext) => PassportOptions)) => import("../../types.js").Validation<PassportOptions | ((field: FieldContext) => PassportOptions)>;
export declare const postalCodeRule: (options?: PostalCodeOptions | ((field: FieldContext) => PostalCodeOptions | void | undefined) | undefined) => import("../../types.js").Validation<PostalCodeOptions | ((field: FieldContext) => PostalCodeOptions | void | undefined) | undefined>;
export declare const uuidRule: (options?: {
    version?: (1 | 2 | 4 | 3 | 5)[] | undefined;
} | undefined) => import("../../types.js").Validation<{
    version?: (1 | 2 | 4 | 3 | 5)[] | undefined;
} | undefined>;
export declare const asciiRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const ibanRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const jwtRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
export declare const coordinatesRule: (options?: undefined) => import("../../types.js").Validation<undefined>;
