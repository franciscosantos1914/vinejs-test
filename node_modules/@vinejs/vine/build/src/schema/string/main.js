import { BaseLiteralType } from '../base/literal.js';
import { IS_OF_TYPE, UNIQUE_NAME } from '../../symbols.js';
import { inRule, urlRule, uuidRule, trimRule, alphaRule, emailRule, notInRule, regexRule, sameAsRule, mobileRule, escapeRule, stringRule, hexCodeRule, passportRule, endsWithRule, ipAddressRule, confirmedRule, notSameAsRule, activeUrlRule, minLengthRule, maxLengthRule, startsWithRule, creditCardRule, postalCodeRule, fixedLengthRule, alphaNumericRule, normalizeEmailRule, asciiRule, ibanRule, jwtRule, coordinatesRule, toUpperCaseRule, toLowerCaseRule, toCamelCaseRule, normalizeUrlRule, } from './rules.js';
export class VineString extends BaseLiteralType {
    static rules = {
        in: inRule,
        jwt: jwtRule,
        url: urlRule,
        iban: ibanRule,
        uuid: uuidRule,
        trim: trimRule,
        email: emailRule,
        alpha: alphaRule,
        ascii: asciiRule,
        notIn: notInRule,
        regex: regexRule,
        escape: escapeRule,
        sameAs: sameAsRule,
        mobile: mobileRule,
        string: stringRule,
        hexCode: hexCodeRule,
        passport: passportRule,
        endsWith: endsWithRule,
        confirmed: confirmedRule,
        activeUrl: activeUrlRule,
        minLength: minLengthRule,
        notSameAs: notSameAsRule,
        maxLength: maxLengthRule,
        ipAddress: ipAddressRule,
        creditCard: creditCardRule,
        postalCode: postalCodeRule,
        startsWith: startsWithRule,
        toUpperCase: toUpperCaseRule,
        toLowerCase: toLowerCaseRule,
        toCamelCase: toCamelCaseRule,
        fixedLength: fixedLengthRule,
        coordinates: coordinatesRule,
        normalizeUrl: normalizeUrlRule,
        alphaNumeric: alphaNumericRule,
        normalizeEmail: normalizeEmailRule,
    };
    [UNIQUE_NAME] = 'vine.string';
    [IS_OF_TYPE] = (value) => {
        return typeof value === 'string';
    };
    constructor(options, validations) {
        super(options, validations || [stringRule()]);
    }
    url(...args) {
        return this.use(urlRule(...args));
    }
    activeUrl() {
        return this.use(activeUrlRule());
    }
    email(...args) {
        return this.use(emailRule(...args));
    }
    mobile(...args) {
        return this.use(mobileRule(...args));
    }
    ipAddress(version) {
        return this.use(ipAddressRule(version ? { version } : undefined));
    }
    hexCode() {
        return this.use(hexCodeRule());
    }
    regex(expression) {
        return this.use(regexRule(expression));
    }
    alpha(options) {
        return this.use(alphaRule(options));
    }
    alphaNumeric(options) {
        return this.use(alphaNumericRule(options));
    }
    minLength(expectedLength) {
        return this.use(minLengthRule({ min: expectedLength }));
    }
    maxLength(expectedLength) {
        return this.use(maxLengthRule({ max: expectedLength }));
    }
    fixedLength(expectedLength) {
        return this.use(fixedLengthRule({ size: expectedLength }));
    }
    confirmed(options) {
        return this.use(confirmedRule(options));
    }
    trim() {
        return this.use(trimRule());
    }
    normalizeEmail(options) {
        return this.use(normalizeEmailRule(options));
    }
    toUpperCase() {
        return this.use(toUpperCaseRule());
    }
    toLowerCase() {
        return this.use(toLowerCaseRule());
    }
    toCamelCase() {
        return this.use(toCamelCaseRule());
    }
    escape() {
        return this.use(escapeRule());
    }
    normalizeUrl(...args) {
        return this.use(normalizeUrlRule(...args));
    }
    startsWith(substring) {
        return this.use(startsWithRule({ substring }));
    }
    endsWith(substring) {
        return this.use(endsWithRule({ substring }));
    }
    sameAs(otherField) {
        return this.use(sameAsRule({ otherField }));
    }
    notSameAs(otherField) {
        return this.use(notSameAsRule({ otherField }));
    }
    in(choices) {
        return this.use(inRule({ choices }));
    }
    notIn(list) {
        return this.use(notInRule({ list }));
    }
    creditCard(...args) {
        return this.use(creditCardRule(...args));
    }
    passport(...args) {
        return this.use(passportRule(...args));
    }
    postalCode(...args) {
        return this.use(postalCodeRule(...args));
    }
    uuid(...args) {
        return this.use(uuidRule(...args));
    }
    ascii() {
        return this.use(asciiRule());
    }
    iban() {
        return this.use(ibanRule());
    }
    jwt() {
        return this.use(jwtRule());
    }
    coordinates() {
        return this.use(coordinatesRule());
    }
    clone() {
        return new VineString(this.cloneOptions(), this.cloneValidations());
    }
}
