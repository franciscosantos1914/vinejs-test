import Macroable from '@poppinss/macroable';
import { VineAny } from './any/main.js';
import { VineEnum } from './enum/main.js';
import { union } from './union/builder.js';
import { VineTuple } from './tuple/main.js';
import { VineArray } from './array/main.js';
import { VineObject } from './object/main.js';
import { VineRecord } from './record/main.js';
import { VineString } from './string/main.js';
import { VineNumber } from './number/main.js';
import { VineBoolean } from './boolean/main.js';
import { VineLiteral } from './literal/main.js';
import { VineAccepted } from './accepted/main.js';
import { group } from './object/group_builder.js';
import { VineNativeEnum } from './enum/native_enum.js';
import { VineUnionOfTypes } from './union_of_types/main.js';
import { IS_OF_TYPE, UNIQUE_NAME } from '../symbols.js';
export class SchemaBuilder extends Macroable {
    group = group;
    union = union;
    string() {
        return new VineString();
    }
    boolean(options) {
        return new VineBoolean(options);
    }
    accepted() {
        return new VineAccepted();
    }
    number(options) {
        return new VineNumber(options);
    }
    literal(value) {
        return new VineLiteral(value);
    }
    object(properties) {
        return new VineObject(properties);
    }
    array(schema) {
        return new VineArray(schema);
    }
    tuple(schemas) {
        return new VineTuple(schemas);
    }
    record(schema) {
        return new VineRecord(schema);
    }
    enum(values) {
        if (Array.isArray(values) || typeof values === 'function') {
            return new VineEnum(values);
        }
        return new VineNativeEnum(values);
    }
    any() {
        return new VineAny();
    }
    unionOfTypes(schemas) {
        const schemasInUse = new Set();
        schemas.forEach((schema) => {
            if (!schema[IS_OF_TYPE] || !schema[UNIQUE_NAME]) {
                throw new Error(`Cannot use "${schema.constructor.name}". The schema type is not compatible for use with "vine.unionOfTypes"`);
            }
            if (schemasInUse.has(schema[UNIQUE_NAME])) {
                throw new Error(`Cannot use duplicate schema "${schema[UNIQUE_NAME]}". "vine.unionOfTypes" needs distinct schema types only`);
            }
            schemasInUse.add(schema[UNIQUE_NAME]);
        });
        schemasInUse.clear();
        return new VineUnionOfTypes(schemas);
    }
}
