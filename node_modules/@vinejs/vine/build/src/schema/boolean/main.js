import { booleanRule } from './rules.js';
import { helpers } from '../../vine/helpers.js';
import { BaseLiteralType } from '../base/literal.js';
import { IS_OF_TYPE, UNIQUE_NAME } from '../../symbols.js';
export class VineBoolean extends BaseLiteralType {
    static rules = {
        boolean: booleanRule,
    };
    [UNIQUE_NAME] = 'vine.boolean';
    [IS_OF_TYPE] = (value) => {
        const valueAsBoolean = this.options.strict === true ? value : helpers.asBoolean(value);
        return typeof valueAsBoolean === 'boolean';
    };
    constructor(options, validations) {
        super(options, validations || [booleanRule(options || {})]);
    }
    clone() {
        return new VineBoolean(this.cloneOptions(), this.cloneValidations());
    }
}
