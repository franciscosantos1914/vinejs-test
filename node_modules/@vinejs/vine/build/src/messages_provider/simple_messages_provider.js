export class SimpleMessagesProvider {
    #messages;
    #fields;
    constructor(messages, fields) {
        this.#messages = messages;
        this.#fields = fields;
    }
    #interpolate(message, data) {
        if (!message.includes('{{')) {
            return message;
        }
        return message.replace(/(\\)?{{(.*?)}}/g, (_, __, key) => {
            const tokens = key.trim().split('.');
            let output = data;
            while (tokens.length) {
                if (output === null || typeof output !== 'object') {
                    return;
                }
                const token = tokens.shift();
                output = Object.hasOwn(output, token) ? output[token] : undefined;
            }
            return output;
        });
    }
    getMessage(rawMessage, rule, field, args) {
        const fieldName = this.#fields[field.name] || field.name;
        const fieldMessage = this.#messages[`${field.wildCardPath}.${rule}`];
        if (fieldMessage) {
            return this.#interpolate(fieldMessage, {
                field: fieldName,
                ...args,
            });
        }
        const ruleMessage = this.#messages[rule];
        if (ruleMessage) {
            return this.#interpolate(ruleMessage, {
                field: fieldName,
                ...args,
            });
        }
        return this.#interpolate(rawMessage, {
            field: fieldName,
            ...args,
        });
    }
}
