import { Compiler, refsBuilder } from '@vinejs/compiler';
import { messages } from '../defaults.js';
import { OTYPE, PARSE } from '../symbols.js';
const COMPILER_ERROR_MESSAGES = {
    required: messages.required,
    array: messages.array,
    object: messages.object,
};
export class VineValidator {
    messagesProvider;
    errorReporter;
    #parse(schema) {
        const refs = refsBuilder();
        return {
            compilerNode: {
                type: 'root',
                schema: schema[PARSE]('', refs, { toCamelCase: false }),
            },
            refs: refs.toJSON(),
        };
    }
    #refs;
    #validateFn;
    constructor(schema, options) {
        const { compilerNode, refs } = this.#parse(schema);
        this.#refs = refs;
        this.#validateFn = new Compiler(compilerNode, {
            convertEmptyStringsToNull: options.convertEmptyStringsToNull,
            messages: COMPILER_ERROR_MESSAGES,
        }).compile();
        this.errorReporter = options.errorReporter;
        this.messagesProvider = options.messagesProvider;
    }
    validate(data, options) {
        const errorReporter = options?.errorReporter || this.errorReporter;
        const messagesProvider = options?.messagesProvider || this.messagesProvider;
        return this.#validateFn(data, options?.meta || {}, this.#refs, messagesProvider, errorReporter());
    }
}
