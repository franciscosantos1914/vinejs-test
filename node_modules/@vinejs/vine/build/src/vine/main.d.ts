import { createRule } from './create_rule.js';
import { SchemaBuilder } from '../schema/builder.js';
import { VineValidator } from './validator.js';
import type { Infer, SchemaTypes, ValidationOptions, ErrorReporterContract, MessagesProviderContact } from '../types.js';
export declare class Vine extends SchemaBuilder {
    messagesProvider: MessagesProviderContact;
    errorReporter: () => ErrorReporterContract;
    convertEmptyStringsToNull: boolean;
    helpers: {
        exists(value: any): boolean;
        isMissing(value: any): boolean;
        isTrue(value: any): boolean;
        isFalse(value: any): boolean;
        isString(value: unknown): value is string;
        isObject<Value>(value: unknown): value is Record<PropertyKey, Value>;
        hasKeys(value: Record<string, any>, keys: string[]): boolean;
        isArray<Value_1>(value: unknown): value is Value_1[];
        isNumeric(value: any): boolean;
        asNumber(value: any): number;
        asBoolean(value: any): boolean | null;
        isEmail: typeof import("validator/lib/isEmail.js").default;
        isURL: typeof import("validator/lib/isURL.js").default;
        isAlpha: typeof import("validator").default.isAlpha;
        isAlphaNumeric: typeof import("validator").default.isAlphanumeric;
        isIP: typeof import("validator").default.isIP;
        isUUID: typeof import("validator").default.isUUID;
        isAscii: typeof import("validator").default.isAscii;
        isCreditCard: typeof import("validator").default.isCreditCard;
        isIBAN: typeof import("validator/lib/isIBAN.js").default;
        isJWT: typeof import("validator").default.isJWT;
        isLatLong: typeof import("validator").default.isLatLong;
        isMobilePhone: typeof import("validator").default.isMobilePhone;
        isPassportNumber: typeof import("validator").default.isPassportNumber;
        isPostalCode: typeof import("validator").default.isPostalCode;
        isSlug: typeof import("validator").default.isSlug;
        isDecimal: typeof import("validator").default.isDecimal;
        mobileLocales: import("validator").default.MobilePhoneLocale[];
        postalCountryCodes: import("validator").default.PostalCodeLocale[];
        passportCountryCodes: readonly ["AM", "AR", "AT", "AU", "AZ", "BE", "BG", "BR", "BY", "CA", "CH", "CY", "CZ", "DE", "DK", "DZ", "ES", "FI", "FR", "GB", "GR", "HR", "HU", "IE", "IN", "ID", "IR", "IS", "IT", "JM", "JP", "KR", "KZ", "LI", "LT", "LU", "LV", "LY", "MT", "MZ", "MY", "MX", "NL", "NZ", "PH", "PK", "PL", "PT", "RO", "RU", "SE", "SL", "SK", "TH", "TR", "UA", "US"];
        isHexColor: (value: string) => boolean;
        isActiveURL: (url: string) => Promise<boolean>;
        isDistinct: (dataSet: any[], fields?: string | string[] | undefined) => boolean;
    };
    createRule: typeof createRule;
    compile<Schema extends SchemaTypes>(schema: Schema): VineValidator<Schema>;
    validate<Schema extends SchemaTypes>(options: {
        schema: Schema;
        data: any;
    } & ValidationOptions): Promise<Infer<Schema>>;
}
