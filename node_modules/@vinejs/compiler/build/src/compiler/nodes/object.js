import { BaseNode } from './base.js';
import { defineObjectGuard } from '../../scripts/object/guard.js';
import { defineElseCondition } from '../../scripts/define_else_conditon.js';
import { defineIsValidGuard } from '../../scripts/field/is_valid_guard.js';
import { defineFieldNullOutput } from '../../scripts/field/null_output.js';
import { defineFieldValidations } from '../../scripts/field/validations.js';
import { defineConditionalGuard } from '../../scripts/define_conditional_guard.js';
import { defineObjectInitialOutput } from '../../scripts/object/initial_output.js';
import { defineMoveProperties } from '../../scripts/object/move_unknown_properties.js';
import { defineFieldExistenceValidations } from '../../scripts/field/existence_validations.js';
export class ObjectNodeCompiler extends BaseNode {
    #node;
    #buffer;
    #compiler;
    constructor(node, buffer, compiler, parent, parentField) {
        super(node, compiler, parent, parentField);
        this.#node = node;
        this.#buffer = buffer;
        this.#compiler = compiler;
    }
    #getFieldNames(node) {
        let fieldNames = node.properties.map((child) => child.fieldName);
        const groupsFieldNames = node.groups.flatMap((group) => this.#getGroupFieldNames(group));
        return fieldNames.concat(groupsFieldNames);
    }
    #getGroupFieldNames(group) {
        return group.conditions.flatMap((condition) => {
            return this.#getFieldNames(condition.schema);
        });
    }
    #compileObjectChildren() {
        const buffer = this.#buffer.child();
        const parent = {
            type: 'object',
            fieldPathExpression: this.field.fieldPathExpression,
            outputExpression: this.field.outputExpression,
            variableName: this.field.variableName,
            wildCardPath: this.field.wildCardPath,
        };
        this.#node.properties.forEach((child) => this.#compiler.compileNode(child, buffer, parent));
        return buffer.toString();
    }
    #compileObjectGroups() {
        const buffer = this.#buffer.child();
        const parent = {
            type: 'object',
            fieldPathExpression: this.field.fieldPathExpression,
            outputExpression: this.field.outputExpression,
            variableName: this.field.variableName,
            wildCardPath: this.field.wildCardPath,
        };
        this.#node.groups.forEach((group) => this.#compileObjectGroup(group, buffer, parent));
        return buffer.toString();
    }
    #compileObjectGroup(group, buffer, parent) {
        group.conditions.forEach((condition, index) => {
            const guardBuffer = buffer.child();
            condition.schema.properties.forEach((child) => {
                this.#compiler.compileNode(child, guardBuffer, parent);
            });
            condition.schema.groups.forEach((child) => {
                this.#compileObjectGroup(child, guardBuffer, parent);
            });
            buffer.writeStatement(defineConditionalGuard({
                variableName: this.field.variableName,
                conditional: index === 0 ? 'if' : 'else if',
                conditionalFnRefId: condition.conditionalFnRefId,
                guardedCodeSnippet: guardBuffer.toString(),
            }));
        });
        if (group.elseConditionalFnRefId && group.conditions.length) {
            buffer.writeStatement(defineElseCondition({
                variableName: this.field.variableName,
                conditionalFnRefId: group.elseConditionalFnRefId,
            }));
        }
    }
    compile() {
        this.defineField(this.#buffer);
        this.#buffer.writeStatement(defineFieldExistenceValidations({
            allowNull: this.#node.allowNull,
            isOptional: this.#node.isOptional,
            variableName: this.field.variableName,
        }));
        const isObjectValidBlock = defineIsValidGuard({
            variableName: this.field.variableName,
            bail: this.#node.bail,
            guardedCodeSnippet: `${defineObjectInitialOutput({
                variableName: this.field.variableName,
                outputExpression: this.field.outputExpression,
                outputValueExpression: '{}',
            })}${this.#buffer.newLine}${this.#compileObjectChildren()}${this.#buffer.newLine}${this.#compileObjectGroups()}${this.#buffer.newLine}${defineMoveProperties({
                variableName: this.field.variableName,
                allowUnknownProperties: this.#node.allowUnknownProperties,
                fieldsToIgnore: this.#node.allowUnknownProperties ? this.#getFieldNames(this.#node) : [],
            })}`,
        });
        const isValueAnObject = defineObjectGuard({
            variableName: this.field.variableName,
            guardedCodeSnippet: `${defineFieldValidations({
                variableName: this.field.variableName,
                validations: this.#node.validations,
                bail: this.#node.bail,
                dropMissingCheck: true,
            })}${isObjectValidBlock}`,
        });
        this.#buffer.writeStatement(`${isValueAnObject}${this.#buffer.newLine}${defineFieldNullOutput({
            variableName: this.field.variableName,
            allowNull: this.#node.allowNull,
            outputExpression: this.field.outputExpression,
            conditional: 'else if',
        })}`);
    }
}
