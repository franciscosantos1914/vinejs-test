import { BaseNode } from './base.js';
import { defineFieldValidations } from '../../scripts/field/validations.js';
import { defineFieldNullOutput } from '../../scripts/field/null_output.js';
import { defineFieldValueOutput } from '../../scripts/field/value_output.js';
import { defineFieldExistenceValidations } from '../../scripts/field/existence_validations.js';
export class LiteralNodeCompiler extends BaseNode {
    #node;
    #buffer;
    constructor(node, buffer, compiler, parent, parentField) {
        super(node, compiler, parent, parentField);
        this.#node = node;
        this.#buffer = buffer;
    }
    compile() {
        this.defineField(this.#buffer);
        this.#buffer.writeStatement(defineFieldExistenceValidations({
            allowNull: this.#node.allowNull,
            isOptional: this.#node.isOptional,
            variableName: this.field.variableName,
        }));
        this.#buffer.writeStatement(defineFieldValidations({
            variableName: this.field.variableName,
            validations: this.#node.validations,
            bail: this.#node.bail,
            dropMissingCheck: false,
        }));
        this.#buffer.writeStatement(`${defineFieldValueOutput({
            variableName: this.field.variableName,
            outputExpression: this.field.outputExpression,
            transformFnRefId: this.#node.transformFnId,
        })}${this.#buffer.newLine}${defineFieldNullOutput({
            variableName: this.field.variableName,
            allowNull: this.#node.allowNull,
            outputExpression: this.field.outputExpression,
            transformFnRefId: this.#node.transformFnId,
            conditional: 'else if',
        })}`);
    }
}
