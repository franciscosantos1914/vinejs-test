import { defineFieldVariables } from '../../scripts/field/variables.js';
export class BaseNode {
    #node;
    #parentField;
    field;
    constructor(node, compiler, parent, parentField) {
        this.#parentField = parentField;
        this.#node = node;
        if (this.#parentField) {
            this.field = this.#parentField;
        }
        else {
            compiler.variablesCounter++;
            this.field = compiler.createFieldFor(node, parent);
        }
    }
    defineField(buffer) {
        if (!this.#parentField) {
            buffer.writeStatement(defineFieldVariables({
                fieldNameExpression: this.field.fieldNameExpression,
                isArrayMember: this.field.isArrayMember,
                parentValueExpression: this.field.parentValueExpression,
                valueExpression: this.field.valueExpression,
                variableName: this.field.variableName,
                wildCardPath: this.field.wildCardPath,
                parseFnRefId: 'parseFnId' in this.#node ? this.#node.parseFnId : undefined,
            }));
        }
    }
}
