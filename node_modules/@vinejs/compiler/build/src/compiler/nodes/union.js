import { BaseNode } from './base.js';
import { callParseFunction } from '../../scripts/union/parse.js';
import { defineElseCondition } from '../../scripts/define_else_conditon.js';
import { defineConditionalGuard } from '../../scripts/define_conditional_guard.js';
export class UnionNodeCompiler extends BaseNode {
    #compiler;
    #node;
    #buffer;
    #parent;
    constructor(node, buffer, compiler, parent, parentField) {
        super(node, compiler, parent, parentField);
        this.#node = node;
        this.#buffer = buffer;
        this.#parent = parent;
        this.#compiler = compiler;
    }
    #compileUnionChildren() {
        const childrenBuffer = this.#buffer.child();
        this.#node.conditions.forEach((child, index) => {
            const conditionalBuffer = this.#buffer.child();
            if ('parseFnId' in child.schema) {
                conditionalBuffer.writeStatement(callParseFunction({
                    parseFnRefId: child.schema.parseFnId,
                    variableName: this.field.variableName,
                }));
            }
            this.#compiler.compileNode(child.schema, conditionalBuffer, this.#parent, this.field);
            childrenBuffer.writeStatement(defineConditionalGuard({
                conditional: index === 0 ? 'if' : 'else if',
                variableName: this.field.variableName,
                conditionalFnRefId: child.conditionalFnRefId,
                guardedCodeSnippet: conditionalBuffer.toString(),
            }));
            conditionalBuffer.flush();
        });
        if (this.#node.elseConditionalFnRefId && this.#node.conditions.length) {
            childrenBuffer.writeStatement(defineElseCondition({
                variableName: this.field.variableName,
                conditionalFnRefId: this.#node.elseConditionalFnRefId,
            }));
        }
        return childrenBuffer.toString();
    }
    compile() {
        this.defineField(this.#buffer);
        this.#buffer.writeStatement(this.#compileUnionChildren());
    }
}
