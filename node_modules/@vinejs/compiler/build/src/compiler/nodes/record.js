import { BaseNode } from './base.js';
import { defineRecordLoop } from '../../scripts/record/loop.js';
import { defineObjectGuard } from '../../scripts/object/guard.js';
import { defineFieldNullOutput } from '../../scripts/field/null_output.js';
import { defineIsValidGuard } from '../../scripts/field/is_valid_guard.js';
import { defineFieldValidations } from '../../scripts/field/validations.js';
import { defineObjectInitialOutput } from '../../scripts/object/initial_output.js';
import { defineFieldExistenceValidations } from '../../scripts/field/existence_validations.js';
export class RecordNodeCompiler extends BaseNode {
    #node;
    #buffer;
    #compiler;
    constructor(node, buffer, compiler, parent, parentField) {
        super(node, compiler, parent, parentField);
        this.#node = node;
        this.#buffer = buffer;
        this.#compiler = compiler;
    }
    #compileRecordElements() {
        const buffer = this.#buffer.child();
        const recordElementsBuffer = this.#buffer.child();
        this.#compiler.compileNode(this.#node.each, recordElementsBuffer, {
            type: 'record',
            fieldPathExpression: this.field.fieldPathExpression,
            outputExpression: this.field.outputExpression,
            variableName: this.field.variableName,
            wildCardPath: this.field.wildCardPath,
        });
        buffer.writeStatement(defineRecordLoop({
            variableName: this.field.variableName,
            loopCodeSnippet: recordElementsBuffer.toString(),
        }));
        recordElementsBuffer.flush();
        return buffer.toString();
    }
    compile() {
        this.defineField(this.#buffer);
        this.#buffer.writeStatement(defineFieldExistenceValidations({
            allowNull: this.#node.allowNull,
            isOptional: this.#node.isOptional,
            variableName: this.field.variableName,
        }));
        const isObjectValidBlock = defineIsValidGuard({
            variableName: this.field.variableName,
            bail: this.#node.bail,
            guardedCodeSnippet: `${defineObjectInitialOutput({
                variableName: this.field.variableName,
                outputExpression: this.field.outputExpression,
                outputValueExpression: `{}`,
            })}${this.#compileRecordElements()}`,
        });
        const isValueAnObjectBlock = defineObjectGuard({
            variableName: this.field.variableName,
            guardedCodeSnippet: `${defineFieldValidations({
                variableName: this.field.variableName,
                validations: this.#node.validations,
                bail: this.#node.bail,
                dropMissingCheck: true,
            })}${this.#buffer.newLine}${isObjectValidBlock}`,
        });
        this.#buffer.writeStatement(`${isValueAnObjectBlock}${this.#buffer.newLine}${defineFieldNullOutput({
            allowNull: this.#node.allowNull,
            outputExpression: this.field.outputExpression,
            variableName: this.field.variableName,
            conditional: 'else if',
        })}`);
    }
}
