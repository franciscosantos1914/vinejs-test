function wrapInConditional(conditions, wrappingCode) {
    const [first, second] = conditions;
    if (first && second) {
        return `if (${first} && ${second}) {
  ${wrappingCode}
}`;
    }
    if (first) {
        return `if (${first}) {
  ${wrappingCode}
}`;
    }
    if (second) {
        return `if (${second}) {
  ${wrappingCode}
}`;
    }
    return wrappingCode;
}
function emitValidationSnippet({ isAsync, implicit, ruleFnId }, variableName, bail, dropMissingCheck) {
    const rule = `refs['${ruleFnId}']`;
    const callable = `${rule}.validator(${variableName}.value, ${rule}.options, ${variableName});`;
    const bailCondition = bail ? `${variableName}.isValid` : '';
    const implicitCondition = implicit || dropMissingCheck ? '' : `${variableName}.isDefined`;
    return wrapInConditional([bailCondition, implicitCondition], isAsync ? `await ${callable}` : `${callable}`);
}
export function defineFieldValidations({ bail, validations, variableName, dropMissingCheck, }) {
    return `${validations
        .map((one) => emitValidationSnippet(one, variableName, bail, dropMissingCheck))
        .join('\n')}`;
}
