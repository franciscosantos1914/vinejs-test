export default class Macroable {
    static macro(name, value) {
        this.prototype[name] = value;
    }
    static getter(name, accumulator, singleton = false) {
        Object.defineProperty(this.prototype, name, {
            get() {
                const value = accumulator.call(this);
                if (singleton) {
                    Object.defineProperty(this, name, {
                        configurable: false,
                        enumerable: false,
                        value: value,
                        writable: false,
                    });
                }
                return value;
            },
            configurable: true,
            enumerable: false,
        });
    }
}
